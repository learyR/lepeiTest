package com.example.lr.test.model.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.lr.test.entity.Message;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MESSAGE".
*/
public class MessageDao extends AbstractDao<Message, Long> {

    public static final String TABLENAME = "MESSAGE";

    /**
     * Properties of entity Message.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Msg = new Property(1, String.class, "msg", false, "MSG");
        public final static Property UserNick = new Property(2, String.class, "userNick", false, "USER_NICK");
        public final static Property UserAvatorUrl = new Property(3, String.class, "userAvatorUrl", false, "USER_AVATOR_URL");
        public final static Property IsSend = new Property(4, boolean.class, "isSend", false, "IS_SEND");
        public final static Property Time = new Property(5, String.class, "time", false, "TIME");
    }


    public MessageDao(DaoConfig config) {
        super(config);
    }
    
    public MessageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MESSAGE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"MSG\" TEXT NOT NULL ," + // 1: msg
                "\"USER_NICK\" TEXT," + // 2: userNick
                "\"USER_AVATOR_URL\" TEXT," + // 3: userAvatorUrl
                "\"IS_SEND\" INTEGER NOT NULL ," + // 4: isSend
                "\"TIME\" TEXT);"); // 5: time
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MESSAGE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Message entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getMsg());
 
        String userNick = entity.getUserNick();
        if (userNick != null) {
            stmt.bindString(3, userNick);
        }
 
        String userAvatorUrl = entity.getUserAvatorUrl();
        if (userAvatorUrl != null) {
            stmt.bindString(4, userAvatorUrl);
        }
        stmt.bindLong(5, entity.getIsSend() ? 1L: 0L);
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(6, time);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Message entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getMsg());
 
        String userNick = entity.getUserNick();
        if (userNick != null) {
            stmt.bindString(3, userNick);
        }
 
        String userAvatorUrl = entity.getUserAvatorUrl();
        if (userAvatorUrl != null) {
            stmt.bindString(4, userAvatorUrl);
        }
        stmt.bindLong(5, entity.getIsSend() ? 1L: 0L);
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(6, time);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Message readEntity(Cursor cursor, int offset) {
        Message entity = new Message( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // msg
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userNick
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // userAvatorUrl
            cursor.getShort(offset + 4) != 0, // isSend
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // time
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Message entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMsg(cursor.getString(offset + 1));
        entity.setUserNick(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUserAvatorUrl(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIsSend(cursor.getShort(offset + 4) != 0);
        entity.setTime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Message entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Message entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Message entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
